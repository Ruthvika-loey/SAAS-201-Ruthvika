# Please use require_relative for requiring any dependencies
require_relative './application'

# The Main application that will be running your code
def cls
  system 'cls'
end

def main_display
  puts "Please choose the action you would like to perform?" \
  "\n1. Enroll into a department" \
  "\n2. Change your department" \
  "\n3. Change your section" \
  "\n4. View details" \
  "\n5. Show Departments"
end

def common_question_1
  puts 'What is your name?'
end

def common_question_2
  puts "Please select your department from the given choices?" \
  "\nEEE" \
  "\nMECH" \
  "\nCSE" \
  "\nCIVIL"
end

def section_question_3
  puts "Please select your section from the given choices?" \
  "\nA" \
  "\nB" \
  "\nC" \
end

def details_view_options
  puts "Please choose the details you would like to get?" \
  "\n1. List all students in a department" \
  "\n2. List all students in a section" \
  "\n3. List details of a student"
end

application = Application.new

loop do
  main_display
  user_option = gets.chomp.to_i
  case user_option
  when 1
    common_question_1
    student_name = gets.chomp
    common_question_2
    student_dept = gets.chomp
    puts application.enroll student_name, student_dept
  when 2
    common_question_1
    student_name = gets.chomp
    common_question_2
    student_dept = gets.chomp
    puts application.change_dept student_name, student_dept
  when 3
    common_question_1
    student_name = gets.chomp
    section_question_3
    section = gets.chomp
    puts application.change_section student_name, section
  when 4
    details_view_options
    selected_view = gets.chomp.to_i
    case selected_view
    when 1
      common_question_2
      student_dept = gets.chomp
      puts application.department_view student_dept
    when 2
      common_question_2
      student_dept = gets.chomp
      section_question_3
      section = gets.chomp
      puts papplication.section_view student_dept, section
    when 3
      common_question_1
      student_name = gets.chomp
      puts application.student_details student_name
    end
  when 5
    application.show
  end
  puts 'Press any key to go back'
  gets
  cls
end




 require_relative './department' # Include other files in the same directory

# Your application
class Application
   attr_accessor :departments

  def initialize
     self.departments=[]
     #self.departments = ['EEE', 'MECH', 'CSE', 'CIVIL'].each { |dept| Department.new(dept) }
     ['EEE', 'MECH', 'CSE', 'CIVIL'].each do |dept| 
      self.departments<<Department.new(dept) 
    end
  end

  def show
    self.departments.each do |dept|
      dept.show
    end
  end

  def enroll(student_name, student_department)
     department = self.departments.detect { |dept| dept.get_name == student_department}
     section=department.get_section
     sect=section[0]
     rollno=department.get_name+section
     department.add_rollno(student_name,rollno)
     "You have been enrolled to #{student_department}" \
     "\nYou have been allotted section #{sect}" \
     "\nYour roll number is #{rollno}"
     
  end

  def change_dept(student_name, student_department)
    ## write some logic to frame the string below
    rollno=""
    old_dept=""
    self.departments.each do |dept|
      rollno=dept.get_details(student_name)
      if rollno != nil
        puts "rollno is #{rollno}"
        i=-1
        while rollno[i]>='0' and rollno[i] <='9'
            i=i-1
        end
        puts "Section is #{rollno[i]}"
        old_dept=dept
        break
      end
      #if putsdept.get_details(student_name)
       # dept.remove_rollno(student_name)
        #puts "#{student_name} removed"
        #break
      #end
    end
    department = self.departments.detect { |dept| dept.get_name == student_department}
    section=department.get_section
    if section==0
      "Thers is no seat" \
    else  
      old_dept.remove_rollno(student_name)
      sect=section[0]
      rollno=department.get_name+section
      department.add_rollno(student_name,rollno)
      "You have been enrolled to #{student_department}" \
      "\nYou have been allotted section #{sect}" \
      "\nYour roll number is #{rollno}"
    end
  end

  def change_section(student_name, section)
    ## write some logic to frame the string below
    rollno=""
    old_dept=""
    self.departments.each do |dept|                       # This block is for finding the department
      rollno=dept.get_details(student_name)               # of the given student
      if rollno != nil
        #puts "rollno is #{rollno}"
        i=-1
        while rollno[i]>='0' and rollno[i] <='9'
            i=i-1
        end
        #puts "Section is #{rollno[i]}"
        old_dept=dept
        break
      end
    end
    sectcnt=old_dept.get_seats_in_section(section)
    #puts sectcnt
    if sectcnt>=1
      old_dept.remove_rollno(student_name)
      sect=old_dept.get_specific_section_rollno(section)
      #sect=section[0]
      #rollno=old_dept.get_name+section.to_s
      rollno=old_dept.get_name+sect.to_s
      old_dept.add_rollno(student_name,rollno)
      #{}"You have been enrolled to #{student_department}" \
      "\nYou have been allotted section #{section}" \
      "\nYour roll number is #{rollno}"
    else
      puts 'No Seats'
    end
    #department = self.departments.detect { |dept| dept.get_name == student_department}
  end

  def department_view(student_dept)
    ## write some logic to frame the string below
    department = self.departments.detect { |dept| dept.get_name == student_dept}
    #{}"List of students:" \
        department.show_details
  end

  def section_view(student_dept, section)
    ## write some logic to frame the string below
    "List of students:" \
    "\nTom - MECB01"
  end

  def student_details(student_name)
    ## write some logic to frame the string below
    "Tom - MECH - Section B - MECB01"
  end
end




class Department
	attr_accessor :deptname , :sections, :studentslist
	def initialize(name)
		self.deptname=name
		self.sections={'A'=>10,'B'=>10,'C'=>10}
		self.studentslist={}
	end
	def show
		puts self.deptname
	end

	def show_details
		#studentslist=studentslist.sort_by { |key, val| key }
		#studentslist=studentslist.sort_by { |key, val| key }
		#studentslist.keys.sort.each { |ke,val| }
		#studentslist.keys.sort

		studentslist.each do |key,val|
			puts "#{key} has roll no #{val}"
		end
		#for student in self.studentslist:
		#		puts student[]
      		#puts "Student #{ke} with roll no #{value}"
    	#end
	end

	def get_details(stud_name)
		studentslist[stud_name]
	end

	def get_name
		deptname
	end

	def add_rollno(stud_name,rollno)
		studentslist[stud_name]=rollno
		puts studentslist[stud_name]
	end		

	def remove_rollno(stud_name)
		studentslist.delete(stud_name)
	end

	def get_seats_in_section(section)
		 self.sections[section] 
	end

	def get_specific_section_rollno(section)
		sect=10-self.sections[section]+1
		sect=section+sect.to_s
		self.sections[section]=self.sections[section]-1
		return sect
	end

	def get_section
		if self.sections['A'] >= 1
			sect=10-self.sections["A"]+1
			sect='A'+sect.to_s
			self.sections['A']=self.sections['A']-1
		elsif self.sections['B'] >=1
			sect=10-self.sections["B"]+1
			sect='B'+sect.to_s
			self.sections['B']=self.sections['B']-1
		elsif self.sections['C'] >= 1
			sect=10-self.sections["C"]+1
			sect='C'+sect.to_s
			self.sections['C']=self.sections['C']-1			
		else
			sect=0
		end
		return sect
	end

end


